# Инструкция по запуску RAG-бота для Telegram-канала

---

## 1. Установка зависимостей

### 1.1. Создайте и активируйте виртуальное окружение (рекомендуется):

```bash
python3 -m venv .venv
source .venv/bin/activate
# или для Windows:
# .venv\Scripts\activate
```

### 1.2. Установите необходимые библиотеки:

```bash
pip install -r requirements.txt
```

**Содержимое `requirements.txt` должно быть примерно таким:**
```text
numpy
faiss-cpu
sentence-transformers
pandas
python-telegram-bot>=20.0
python-docx
beautifulsoup4
requests
aiofiles
```
> **NB:** Если используете CUDA/GPU, установите `faiss-gpu` вместо `faiss-cpu`.

---

## 2. Подготовка структуры проекта

**Скопируйте или создайте структуру:**
```
project_root/
├── main.py
├── rag_utils.py
├── rag_chunk_tracker.py
├── rag_retriever.py
├── rag_lmclient.py
├── rag_telegram.py
├── requirements.txt
├── data/
│   ├── topics.txt
│   ├── prompt.txt
│   ├── prompt_1/
│   │   └── ... (txt)
│   └── prompt_2/
│       └── ... (txt)
├── inform/
│   └── ... (ваши .txt, .csv, .xlsx, .docx и т.п.)
└── logs/
```
- В `data/topics.txt` — список тем, по одной на строку.
- В `data/prompt_1/` и `data/prompt_2/` — ваши шаблоны промтов.
- В `inform/` — ваши файлы знаний (поддерживаются: txt, html, docx, doc, csv, xlsx).

---

## 3. Алгоритм действий для запуска

### Шаг 1. Подготовьте данные:
- Заполните `data/topics.txt` (темы для генерации).
- Проверьте, что в `data/prompt_1/` и `data/prompt_2/` есть хотя бы по одному шаблону.
- Поместите ваши документы для RAG (txt, docx, csv, xlsx, html) в папку `inform/`.

### Шаг 2. Проверьте параметры в main.py:
- Токен Telegram-бота (`BOT_TOKEN`)
- ID канала (`CHANNEL_ID`)
- Пути к папкам (`DATA_DIR`, `INFORM_DIR`, и пр.)
- Параметры моделей, размер чанка и др. при необходимости.

### Шаг 3. Запустите главный скрипт:

```bash
python main.py
```

---

### Описание алгоритма работы:

1. **Инициализация**:
   - Загружаются и (если надо) строятся индексы знаний (`faiss`), загружается статистика использования чанков.
2. **Цикл по темам**:
   - Для каждой темы из `topics.txt`:
     - Извлекается релевантный контекст (RAG).
     - Если в теме есть триггер — вызывается нужный инструмент (интернет, калькулятор, таблица), результат добавляется к контексту.
     - Генерируется промт.
     - Отправляется запрос к языковой модели (LM).
     - Результат форматируется и публикуется в Telegram-канал.
     - Производится запись и обновление статистики использования чанков.
3. **Мониторинг**:
   - Ведётся логирование процесса и ошибок.
   - Статистика использования чанков сохраняется для управления разнообразием.

---

## 4. Возможные проблемы

- **Нет библиотек**: Проверьте, что все из `requirements.txt` установлены.
- **Нет GPU/CPU FAISS**: Установите подходящий пакет (`faiss-cpu` или `faiss-gpu`).
- **Проблемы с Telegram**: Проверьте токен, права бота и что бот добавлен в канал как администратор.
- **Ошибка чтения файлов**: Проверьте кодировку и целостность файлов в `inform/`.
- **Слишком длинный пост**: Скрипт сам обрезает до лимита Telegram, но лучше заранее делать шаблоны и темы короче.

---

## 5. Рекомендации

- Для production-сценария используйте screen/tmux/systemd для автозапуска.
- Регулярно очищайте логи и обновляйте usage_statistics.json.
- Следите за обновлениями библиотек и моделей.

---

## 6. Пример запуска цикла вручную

```bash
python main.py
```
- После завершения темы из `topics.txt` будут автоматически очищены.
- Новые темы можно добавлять в `topics.txt` в любой момент.

---

**Если потребуется интеграция с другой LLM, измените параметры LM_URL, LM_MODEL, MAX_TOKENS в main.py и rag_lmclient.py.**

---